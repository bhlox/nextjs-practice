import Head from "next/head";

import {
  collection,
  doc,
  getDoc,
  getDocs,
  limit,
  orderBy,
  query,
} from "firebase/firestore";
import { db } from "../firebase.config";
import { FiChevronsRight } from "react-icons/fi";

import { firebaseAdmin } from "../firebaseAdmin";
// import { firebaseAdmin } from "../firebaseAdmin";

import nookies from "nookies";

import CarouselSlider from "../components/Carousel.jsx";
import { useEffect, useState } from "react";
import LatestPostsPart from "../components/LatestPostsPart.jsx";
import RecentPostsPart from "../components/RecentPostsPart.jsx";
import LoadMorePosts from "../components/LoadMorePosts";
import { useDispatch, useSelector } from "react-redux";
import { homePostsActions } from "../components/store/home-posts-slice";
// import Link from "next/link";
import HomeHeadline from "../components/HomeHeadline";
import { getAuth } from "firebase/auth";

let initial = true;

export default function Home({ posts, username, didPost }) {
  // console.log(posts);

  const auth = getAuth();

  const colRef = collection(db, "posts");

  const [currentUser, setCurrentUser] = useState(username);
  const [latestPosts, setLatestPosts] = useState(
    posts.filter((post, i) => i <= 1)
  );
  const [randomPosts, setRandomPosts] = useState([]);
  const [recentPosts, setRecentPosts] = useState(
    posts.filter((post, i) => i > 1)
  );

  const { isLoggedIn } = useSelector((state) => state.user);

  const fetchRandomPosts = async () => {
    const posts = [];
    try {
      const snapshot = await getDocs(colRef);

      snapshot.docs
        .map((doc) => ({
          ...doc.data(),
          id: doc.id,
          timestamp: doc.data().timestamp.toDate().toDateString(),
        }))
        .sort(() => Math.random() - 0.5)
        .every((doc, i) => {
          if (i > 11) return false;
          posts.push({ ...doc });
          return true;
        });
      setRandomPosts(posts);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    // console.log(isLoggedIn);
    if (!isLoggedIn && !initial) {
      console.log("no user detected");
      setCurrentUser("");
    } else initial = false;
  }, [isLoggedIn]);

  useEffect(() => {
    fetchRandomPosts();
  }, []);

  return (
    <>
      <Head>
        <title>Readis Thoughts</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/newreadit.png" />
      </Head>

      <HomeHeadline username={currentUser} didPost={didPost} />

      <LatestPostsPart latestPosts={latestPosts} />
      <CarouselSlider posts={randomPosts} />
      <RecentPostsPart recentPosts={recentPosts} headline={true} />
      <LoadMorePosts setRecentPosts={setRecentPosts} />
    </>
  );
}

export async function getServerSideProps(context) {
  const colRef = collection(db, "posts");
  const cookies = nookies.get(context);

  try {
    const q = query(colRef, orderBy("timestamp", "desc"), limit(14));

    const snapshot = await getDocs(q);

    const posts = [];
    snapshot.docs.forEach((doc) => {
      posts.push({
        ...doc.data(),
        id: doc.id,
        timestamp: doc.data().timestamp.toDate().toDateString(),
      });
    });

    if (!cookies.token) {
      return {
        props: {
          posts,
          username: "",
          didPost: "",
        },
      };
    }

    const token = await firebaseAdmin.auth().verifyIdToken(cookies.token);
    const { uid } = token;
    const userRef = doc(db, "users", uid);
    const userData = await getDoc(userRef);
    const username = userData.data().username;
    const postsId = userData.data().posts;

    return {
      props: {
        posts,
        username,
        didPost: postsId.length,
      },
    };
  } catch (error) {
    console.log(error);
    return {
      props: {
        posts: [],
      },
    };
  }
}
